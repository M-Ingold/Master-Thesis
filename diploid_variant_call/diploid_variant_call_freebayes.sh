#!/bin/bash

# This program calls variants in BAM files generated by bwa mem and sorted and indexed by samtools.

# Input and output for bamaddrg
PATH_IN_BAMS=../../data/alignment
PATH_BAM_LIST=bam_list_for_bamaddrg.txt

# Input and output for Freebayes
PATH_REF_FILE=../../References/DM_1-3_516_R44_potato_genome_assembly.v6.1.fa
PATH_VCF_OUT=../../data/diploid_VCF
mkdir -p $PATH_VCF_OUT
PATH_STAT_OUT=../../analysis/diploid_variant_calls_freebayes
mkdir -p $PATH_STAT_OUT

# Creation of input file for bamadrrg
# Creating a space separated list of input BAM files of the form "-b $BAM_FILE_PATH -s $SAMPLE_NAME

for folder in ${PATH_IN_BAMS}/Sample*; do
	sample=$(basename $folder)
	bamFile=$(realpath ${folder}/${sample}_sorted.bam)
	echo -n "-b ${bamFile} -s ${sample} " >> $PATH_BAM_LIST
done

# Calculating number of total input samples
TOTAL_SAMPLES=$(ls -l $PATH_IN_BAMS | grep -c ^d)

# Defining color variables for printing progress output!
LGREEN='\033[1;32m'
NC='\033[0m'

# Loop containing the execution of bamadrrg and freebayes #

# Output name for the concatenated BAM file
BIG_BAM_FILE=$PATH_IN_BAMS/all_samples.bam
# Output path and name for the VCF file for each chromosome
VCF_OUT_FILE=$PATH_VCF_OUT/freebayes_${TOTAL_SAMPLES}_samples_diploid.vcf
# Specifying file name for compuation times for each chromosome
COMP=${PATH_STAT_OUT}/computation_times.txt

# Running bamaddrg for creating sample names for the 269 alignment files in PATH_BAM_LIST
# Test for existence of output file
if [ -f "$BIG_BAM_FILE" ]; then
	echo "$BIG_BAM_FILE already exists, skipping bamaddrg."
else 
	BAMADDRG_INPUT=$(head -n 1 ${PATH_BAM_LIST}) # This is necessary for storing the file content in a variable, as expected from bamadrrg
	bdd_start=`date +%s`
	bamaddrg --clear $BAMADDRG_INPUT > $BIG_BAM_FILE
	bdd_end=`date +%s`
	bdd_time=$(($bdd_end-bdd_start))
	echo "bamaddrg sample concatenation and naming time in s ($TOTAL_SAMPLES samples):	$bdd_time" >> $COMP
	echo -e "${LGREEN}BAM concatenation of $TOTAL_SAMPLES samples finished.${NC}"
	
	# Indexing the stacked BAM file for variant calling using Freebayes
	idx_start=`date +%s`
	samtools index $BIG_BAM_FILE
	idx_end=`date +%s`
	idx_time=$(($idx_end-idx_start))
	echo "indexing time of the stacked BAM file in s ($TOTAL_SAMPLES samples):	$idx_time" >> $COMP
	echo -e "${LGREEN}Indexing of BAM file containing $TOTAL_SAMPLES samples ${NC}"
fi

: '
# Running freebayes
fb_start=`date +%s`
freebayes \
	--fasta-reference $PATH_REF_FILE \
        --genotype-qualities \
    	--ploidy 2 \
    	--use-duplicate-reads \
    	--vcf $VCF_OUT_FILE \
    	${BIG_BAM_FILE}
fb_end=`date +%s`
fb_time=$(($fb_end-fb_start))
echo "freebayes variant calling time in s ($TOTAL_SAMPLES samples and 9):	$fb_time" >> $COMP
echo -e "${LGREEN}Variant call of $TOTAL_SAMPLES samples finished.${NC}"
'

# Looping over all chromosomes in the potato genome (chr01-chr12)
chrArray=$(echo {01..12})
for chromosome in $chrArray; do
    # Creating the file chromosome name for each iteration as input for freebayes
    chr=$(echo chr${chromosome})
    # Output path and name for the VCF file for each chromosome
    VCF_OUT_FILE=$PATH_VCF_OUT/freebayes_${TOTAL_SAMPLES}_samples_${chr}_diploid.vcf
    
    # Specifying file name for compuation times for each chromosome
    COMP=${PATH_STAT_OUT}/computation_times_${chr}.txt

	# Running freebayes by chromosome
    fb_start=`date +%s`
    freebayes \
    	--fasta-reference $PATH_REF_FILE \
        --genotype-qualities \
    	--ploidy 2 \
    	--region $chr \
    	--use-duplicate-reads \
    	--vcf $VCF_OUT_FILE \
    	${BIG_BAM_FILE}
    fb_end=`date +%s`
    fb_time=$(($fb_end-fb_start))
    echo "freebayes variant calling time in s ($TOTAL_SAMPLES samples and $chr):	$fb_time" >> $COMP
    echo -e "${LGREEN}Variant call of $TOTAL_SAMPLES samples and for chromosome $chr finished.${NC}"


    # Recording the total computation time
    echo "total time in s:	$((bdd_time+idx_time+fb_time))" >> $COMP
    echo -e "${LGREEN}Variant calling pipeline for $TOTAL_SAMPLES samples and for chromosome $chr completely done!${NC}"
done
